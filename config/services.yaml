# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    SUPPORTED_REPOSITORIES: "akeneo/pim-community-dev,SamirBoulil/slub"
    SUPPORTED_CHANNELS: "squad-raccoons,general"
    SUPPORTED_CI_CHECKS: "Travis CI - Pull Request,ci/circleci: back_behat_legacy"
    locale: 'en'
    slub.infrastructure.persistence.file_database: "%kernel.project_dir%/var/persistence/%kernel.environment%/pr_repository.json"
    slub.infrastructure.chat.slack.base_uri: "https://slack.com"

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: false      # Automatically injects dependencies in your services.
        autoconfigure: false # Automatically registers your services as commands, event subscribers, etc.
        public: true

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    #Slub\:
    #    resource: '../src/Slub/*'
    #    exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # Handlers
    slub.application.put_pr_to_review.put_pr_to_review_handler:
        class: Slub\Application\PutPRToReview\PutPRToReviewHandler
        arguments:
            - "@slub.infrastructure.persistence.pr_repository"
            - "@slub.infrastructure.query.is_supported"
            - "@logger"

    slub.application.new_review.new_review_handler:
        class: Slub\Application\NewReview\NewReviewHandler
        arguments:
            - "@slub.infrastructure.persistence.pr_repository"
            - "@slub.infrastructure.query.is_supported"
            - "@logger"

    slub.application.ci_status_update.ci_status_update_handler:
        class: Slub\Application\CIStatusUpdate\CIStatusUpdateHandler
        arguments:
            - "@slub.infrastructure.persistence.pr_repository"
            - "@slub.infrastructure.query.is_supported"

    slub.application.merged_pr.merged_pr_handler:
        class: Slub\Application\MergedPR\MergedPRHandler
        arguments:
            - "@slub.infrastructure.persistence.pr_repository"
            - "@slub.infrastructure.query.is_supported"

    slub.application.event_subscribers.notify_squad:
        class: Slub\Application\NotifySquad\NotifySquad
        arguments:
            - '@slub.infrastructure.persistence.get_message_ids_for_pr'
            - '@slub.infrastructure.chat.slack.slack_client'
            - '@logger'
        tags:
            - { name: kernel.event_subscriber }

    # Infrastructure
    ## Persistence
    slub.infrastructure.persistence.sql.database_connection:
        class: Doctrine\DBAL\Connection
        factory: 'Slub\Infrastructure\Persistence\Sql\ConnectionFactory::create'
        arguments:
            - "%env(DATABASE_URL)%"

    slub.infrastructure.persistence.pr_repository:
        class: Slub\Infrastructure\Persistence\Sql\Repository\SqlPRRepository
        arguments:
            - "@slub.infrastructure.persistence.sql.database_connection"
            - "@event_dispatcher"

    slub.infrastructure.persistence.get_message_ids_for_pr:
        class: Slub\Infrastructure\Persistence\Sql\Query\SqlGetMessageIdsForPR
        arguments:
            - "@slub.infrastructure.persistence.sql.database_connection"

    slub.infrastructure.query.is_supported:
        class: Slub\Infrastructure\Persistence\InMemory\Query\InMemoryIsSupported
        arguments:
            - "%env(SUPPORTED_REPOSITORIES)%"
            - "%env(SUPPORTED_CHANNELS)%"

    ## Chat
    slub.infrastructure.chat.slack.slub_bot:
        class: Slub\Infrastructure\Chat\Slack\SlubBot
        arguments:
            - '@slub.application.put_pr_to_review.put_pr_to_review_handler'
            - '@slub.infrastructure.query.get_channel_information'
            - '@logger'
            - '%env(SLACK_TOKEN)%'

    slub.infrastructure.chat.slack.slub_bot_action:
        class: Slub\Infrastructure\Chat\Slack\SlubBotAction
        arguments:
            - '@slub.infrastructure.chat.slack.slub_bot'

    slub.infrastructure.query.get_channel_information:
        class: Slub\Infrastructure\Chat\Slack\GetChannelInformation
        arguments:
            - '@slub.infrastructure.chat.slack.guzzle_client'
            - '%env(SLACK_TOKEN)%'

    slub.infrastructure.chat.slack.slack_client:
        class: Slub\Infrastructure\Chat\Slack\SlackClient
        arguments:
            - '@slub.infrastructure.chat.slack.guzzle_client'
            - '%env(SLACK_TOKEN)%'

    slub.infrastructure.chat.slack.guzzle_client:
        class: GuzzleHttp\Client

    ## VCS
    slub.infrastructure.vcs.github.new_event_action:
        class: Slub\Infrastructure\VCS\Github\NewEventAction
        arguments:
            - '@slub.infrastructure.vcs.github.event_handler_registry'
            - '%env(GITHUB_WEBHOOK_SECRET)%'

    slub.infrastructure.vcs.github.event_handler_registry:
        class: Slub\Infrastructure\VCS\Github\EventHandler\EventHandlerRegistry
        calls:
            - method: addEventHandler
              arguments:
                  - '@slub.infrastructure.vcs.github.new_review_event_handler'
            - method: addEventHandler
              arguments:
                  - '@slub.infrastructure.vcs.github.check_run_event_handler'
            - method: addEventHandler
              arguments:
                  - '@slub.infrastructure.vcs.github.check_suite_failed_event_handler'

    slub.infrastructure.vcs.github.new_review_event_handler:
        class: Slub\Infrastructure\VCS\Github\EventHandler\PullRequestReviewEventHandler
        arguments:
            - '@slub.application.new_review.new_review_handler'

    slub.infrastructure.vcs.github.check_run_event_handler:
        class: Slub\Infrastructure\VCS\Github\EventHandler\CheckRunEventHandler
        arguments:
            - '@slub.application.ci_status_update.ci_status_update_handler'
            - '%env(SUPPORTED_CI_CHECKS)%'

    slub.infrastructure.vcs.github.check_suite_failed_event_handler:
        class: Slub\Infrastructure\VCS\Github\EventHandler\CheckSuiteFailedEventHandler
        arguments:
            - '@slub.application.ci_status_update.ci_status_update_handler'

    ## UI
    slub.infrastructure.ui.http.list_prs_action:
        class: Slub\Infrastructure\UI\Http\ListPRsAction
        arguments:
            - '@slub.infrastructure.persistence.pr_repository'

    ## CLI
    slub.infrastructure.installer.cli.InstallerCLI:
        class: Slub\Infrastructure\Installer\CLI\InstallerCLI
        arguments:
            - "@slub.infrastructure.persistence.sql.database_connection"
        tags:
            - { name: console.command }
